/**
 * Notification Service
 * Qu·∫£n l√Ω t·∫•t c·∫£ th√¥ng b√°o push notification trong ·ª©ng d·ª•ng
 * S·ª≠ d·ª•ng Expo Notifications API ƒë·ªÉ g·ª≠i local notifications
 */

import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import { useNotificationStore } from '../state/notifications';

/**
 * C·∫•u h√¨nh cho Notifications handler
 */
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

/**
 * Notification Service Class
 */
export class NotificationService {
  /**
   * Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o t·ª´ ng∆∞·ªùi d√πng
   * @returns Promise<boolean> - Tr·∫£ v·ªÅ true n·∫øu c√≥ quy·ªÅn, false n·∫øu kh√¥ng
   */
  static async registerForPushNotificationsAsync(): Promise<boolean> {
    try {
      // Ch·ªâ ch·∫°y tr√™n thi·∫øt b·ªã th·∫≠t
      if (!Device.isDevice) {
        console.warn('‚ö†Ô∏è Notifications ch·ªâ ho·∫°t ƒë·ªông tr√™n thi·∫øt b·ªã th·∫≠t, kh√¥ng ho·∫°t ƒë·ªông tr√™n emulator');
        return false;
      }

      // L·∫•y tr·∫°ng th√°i quy·ªÅn hi·ªán t·∫°i
      const { status: existingStatus } = await Notifications.getPermissionsAsync();

      let finalStatus = existingStatus;

      // N·∫øu ch∆∞a c√≥ quy·ªÅn, y√™u c·∫ßu quy·ªÅn
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      // N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi, return false
      if (finalStatus !== 'granted') {
        console.warn('‚ö†Ô∏è Ng∆∞·ªùi d√πng t·ª´ ch·ªëi quy·ªÅn g·ª≠i th√¥ng b√°o');
        return false;
      }

      console.log('‚úÖ ƒê√£ c·∫•p quy·ªÅn g·ª≠i th√¥ng b√°o');
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói y√™u c·∫ßu quy·ªÅn th√¥ng b√°o:', error);
      return false;
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o ƒëƒÉng nh·∫≠p th√†nh c√¥ng
   */
  static async sendLoginSuccessNotification(): Promise<void> {
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i b·∫≠t/t·∫Øt th√¥ng b√°o
      const isEnabled = useNotificationStore.getState().enabled;
      if (!isEnabled) {
        console.log('‚ÑπÔ∏è Th√¥ng b√°o ƒë√£ t·∫Øt, kh√¥ng g·ª≠i th√¥ng b√°o ƒëƒÉng nh·∫≠p');
        return;
      }

      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'Ch√†o m·ª´ng b·∫°n quay l·∫°i!',
          body: 'B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng.',
          sound: true,
          data: { type: 'login_success' },
        },
        trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
      });
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒëƒÉng nh·∫≠p th√†nh c√¥ng');
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o ƒëƒÉng nh·∫≠p:', error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
   * @param orderId - ID c·ªßa ƒë∆°n h√†ng
   */
  static async sendOrderCreatedNotification(orderId: string): Promise<void> {
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i b·∫≠t/t·∫Øt th√¥ng b√°o
      const isEnabled = useNotificationStore.getState().enabled;
      if (!isEnabled) {
        console.log('‚ÑπÔ∏è Th√¥ng b√°o ƒë√£ t·∫Øt, kh√¥ng g·ª≠i th√¥ng b√°o ƒë·∫∑t h√†ng');
        return;
      }

      // L·∫•y 8 k√Ω t·ª± cu·ªëi c·ªßa orderId ƒë·ªÉ hi·ªÉn th·ªã ng·∫Øn g·ªçn
      const orderNumber = orderId.slice(-8).toUpperCase();

      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ƒê·∫∑t h√†ng th√†nh c√¥ng! üéâ',
          body: `ƒê∆°n h√†ng #${orderNumber} ƒë√£ ƒë∆∞·ª£c t·∫°o.`,
          sound: true,
          data: { type: 'order_created', orderId },
        },
        trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
      });
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng:', orderNumber);
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o ƒë·∫∑t h√†ng:', error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng
   * @param orderId - ID c·ªßa ƒë∆°n h√†ng
   * @param amount - S·ªë ti·ªÅn thanh to√°n
   */
  static async sendPaymentSuccessNotification(orderId: string, amount?: number): Promise<void> {
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i b·∫≠t/t·∫Øt th√¥ng b√°o
      const isEnabled = useNotificationStore.getState().enabled;
      if (!isEnabled) {
        console.log('‚ÑπÔ∏è Th√¥ng b√°o ƒë√£ t·∫Øt, kh√¥ng g·ª≠i th√¥ng b√°o thanh to√°n');
        return;
      }

      // L·∫•y 8 k√Ω t·ª± cu·ªëi c·ªßa orderId
      const orderNumber = orderId.slice(-8).toUpperCase();

      // T·∫°o n·ªôi dung th√¥ng b√°o
      const body = amount
        ? `Thanh to√°n ho√†n t·∫•t cho ƒë∆°n h√†ng #${orderNumber}.\nS·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')} VNƒê`
        : `Thanh to√°n ho√†n t·∫•t, c·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!`;

      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'Thanh to√°n th√†nh c√¥ng! üí∞',
          body,
          sound: true,
          data: { type: 'payment_success', orderId },
        },
        trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
      });
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng:', orderNumber);
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o thanh to√°n:', error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o t√πy ch·ªânh
   * @param title - Ti√™u ƒë·ªÅ th√¥ng b√°o
   * @param body - N·ªôi dung th√¥ng b√°o
   * @param data - D·ªØ li·ªáu k√®m theo
   */
  static async sendCustomNotification(
    title: string,
    body: string,
    data?: Record<string, any>
  ): Promise<void> {
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i b·∫≠t/t·∫Øt th√¥ng b√°o
      const isEnabled = useNotificationStore.getState().enabled;
      if (!isEnabled) {
        console.log('‚ÑπÔ∏è Th√¥ng b√°o ƒë√£ t·∫Øt, kh√¥ng g·ª≠i th√¥ng b√°o t√πy ch·ªânh');
        return;
      }

      await Notifications.scheduleNotificationAsync({
        content: {
          title,
          body,
          sound: true,
          data: data || {},
        },
        trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
      });
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o t√πy ch·ªânh:', title);
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o t√πy ch·ªânh:', error);
    }
  }

  /**
   * H·ªßy t·∫•t c·∫£ th√¥ng b√°o ƒë√£ l√™n l·ªãch
   */
  static async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('‚úÖ ƒê√£ h·ªßy t·∫•t c·∫£ th√¥ng b√°o');
    } catch (error) {
      console.error('‚ùå L·ªói h·ªßy th√¥ng b√°o:', error);
    }
  }
}

